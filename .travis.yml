language: cpp

dist: trusty
sudo: required

matrix:
  include:
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=not-yet DISTRO=ubuntu DISTRO_VERSION=14.04 CXX_COMPILER=/usr/bin/clang++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=yes DISTRO=ubuntu DISTRO_VERSION=16.04 CXX_COMPILER=/usr/bin/clang++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=not-yet DISTRO=ubuntu DISTRO_VERSION=17.04 CXX_COMPILER=/usr/bin/clang++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=not-yet DISTRO=fedora DISTRO_VERSION=24 CXX_COMPILER=/usr/bin/clang++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=not-yet DISTRO=fedora DISTRO_VERSION=25 CXX_COMPILER=/usr/bin/clang++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=not-yet DISTRO=ubuntu DISTRO_VERSION=14.04 CXX_COMPILER=/usr/bin/g++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=yes DISTRO=ubuntu DISTRO_VERSION=16.04 CXX_COMPILER=/usr/bin/g++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=not-yet DISTRO=ubuntu DISTRO_VERSION=17.04 CXX_COMPILER=/usr/bin/g++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=not-yet DISTRO=fedora DISTRO_VERSION=24 CXX_COMPILER=/usr/bin/g++
    - os: linux
      compiler: clang
      env: DOCKER_BUILD=yes DISTRO=fedora DISTRO_VERSION=25 CXX_COMPILER=/usr/bin/g++

script:
  - if [ "${DOCKER_BUILD?}" = "yes" ]; then
      IMAGE="cached-${DISTRO?}-${DISTRO_VERSION?}";
      latest_id=$(sudo docker inspect -f '{{ .Id }}' ${IMAGE?}:latest)
      cacheargs="";
      if [ "x${latest_id}" != "x" ]; then
        cacheargs="--cache-from ${IMAGE?}:latest";
      fi;
      echo cache args = $cacheargs;
      echo IMAGE = $IMAGE;
      echo IMAGE LATEST ID = $latest_id;
      (cd bigtable/api &&
       sudo docker build -t ${IMAGE?}:tip ${cacheargs?}
          --build-arg DISTRO_VERSION=${DISTRO_VERSION?}
          --build-arg CXX_COMPILER=${CXX_COMPILER?}
          --build-arg TRAVIS_REPO_SLUG=${TRAVIS_REPO_SLUG}
          --build-arg TRAVIS_EVENT_TYPE=${TRAVIS_EVENT_TYPE}
          --build-arg TRAVIS_COMMIT=${TRAVIS_COMMIT}
          -f docker/Dockerfile.${DISTRO?} docker/ );
    fi

addons:
  apt:
    packages:

# Cache the (saved) docker images.
# With recent version of docker one can reuse a prior image as a
# source cache, that can speed up the builds, as the dependencies and
# images can be reused ...
# TODO() - we need to add a cron job to rebuild without a cache every
# so often, the dependencies do change and we want to validate that
# the examples build with the newer versions.  That is easy to do with
# a cron-based build in Travis that cleans up the cache every X days.
cache:
  directories:
    - docker-images/ubuntu/14.04
    - docker-images/ubuntu/16.04
    - docker-images/ubuntu/17.04
    - docker-images/fedora/24
    - docker-images/fedora/25

install:
  # Restore the docker image from the cached directory.  That way we
  # can reuse the steps in the docker image that install
  # pre-requisites and build dependencies ...
  - sudo apt-get update
  - sudo apt-get install -y docker-ce
  - sudo docker --version
  - if [ "${DOCKER_BUILD?}" = "yes" -a
       -f docker-images/${DISTRO?}/${DISTRO_VERSION?}/saved.tar.gz ]; then
      sudo docker load <docker-images/${DISTRO?}/${DISTRO_VERSION?}/saved.tar.gz;
    fi
  # Some debugging ...
  - ls /usr/local/lib/pkgconfig || echo "no /usr/local/lib/pkgconfig"
  - ls -l
  - sudo docker image ls

after_success:
  - if [ "${DOCKER_BUILD?}" = "yes" ]; then
      sudo docker image tag
          cached-${DISTRO?}-${DISTRO_VERSION?}:tip \
          cached-${DISTRO?}-${DISTRO_VERSION?}:latest;
      sudo docker save cached-${DISTRO?}-${DISTRO_VERSION?}:latest |
        gzip > docker-images/${DISTRO?}/${DISTRO_VERSION?}/saved.tar.gz;
    fi

notifications:
  email: false
